syntax = "proto2";

// Sugar for easier handling in Java
option java_package = "com.keepkey.deviceprotocol";
option java_outer_classname = "KeepKeyMessageThorchain";

import "types.proto";

/**
 * Request: Address at the specified index
 * @start
 * @next ThorchainAddress
 */
message ThorchainGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path. For compatibility with other wallets, must be m/44'/931'/index'
    optional bool show_display = 2; // optionally show on display before sending the result
    optional bool testnet = 3;      // if true, return an address with the testnet prefix
}

/**
 * Response: Address for the given index
 * @end
 */
message ThorchainAddress {
    optional string address = 1;    // Address Bech32 encoded with 'thor' prefix (or 'tthor' for testnet)
}

/**
 * Request: ask device to sign Thorchain transaction
 * @start
 * @next ThorchainSignedTx
 */
message ThorchainSignTx {
    repeated uint32 address_n = 1;          // BIP-32 path. For compatibility with other wallets, must be m/44'/931'/index'/0/0
    optional uint64 account_number = 2 [jstype = JS_STRING];
    optional string chain_id = 3;
    optional uint32 fee_amount = 4;
    optional uint32 gas = 5;
    optional string memo = 6;
    optional uint64 sequence = 7 [jstype = JS_STRING];
    optional uint32 msg_count = 8;
}

message ThorchainMsgRequest {}

message ThorchainMsgAck {
    optional ThorchainMsgSend send = 1;
}

message ThorchainMsgSend {
    optional string from_address = 6;
    optional string to_address = 7;
    optional uint64 amount = 8 [jstype = JS_STRING];
    optional OutputAddressType address_type = 9;
    optional ExchangeType exchange_type = 10;
    optional bool testnet = 11;      // if true, decode from addresses with prefix 'tthor'
}

/**
 * Response: signature for transaction
 * @end
 */
message ThorchainSignedTx {
    optional bytes public_key = 1;  // public key for the private key used to sign data
    optional bytes signature = 2;   // signature suitable for sending to the Thorchain network
}
